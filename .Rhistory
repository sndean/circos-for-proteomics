library(tidyverse)
library(RColorBrewer)
library(circlize)
library(limma)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue")
library(tidyverse)
library(RColorBrewer)
library(circlize)
library(limma)
library(qvalue)
set1 <- brewer.pal(11, "RdYlBu")
scale2 <- function(x) (x + 1)
# from Kammers http://www.biostat.jhsph.edu/~kkammers/software/eupa/R_guide.html
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
logFC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(logFC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
dat1 <- read_csv('example.csv') %>%
select(gene, m1:p3) %>%
mutate_if(is.numeric, scale2) %>%
mutate_if(is.numeric, log2)
tr <- c("p1", "p2", "p3")
ct <- c("m1", "m2", "m3")
design <- model.matrix(~factor(c(2,2,2,1,1,1)))
colnames(design) <- c("Intercept", "Diff")
res.eb <- eb.fit(dat1[, c(tr,ct)], design)
dat1_names <- dat1 %>%
rownames_to_column() %>%
select(rowname, gene)
(res.eb1 <- res.eb %>%
rownames_to_column() %>%
left_join(dat1_names, ., by='rowname'))
(circ_df <- read_tsv('GCF_000203855.3_ASM20385v3_feature_table.txt') %>%
filter(class == 'protein_coding') %>%
select(seq_type, seq_type, start, end, attributes) %>%
mutate(
gene = str_replace_all(attributes, 'old_locus_tag=', '')
) %>%
left_join(., res.eb1, by='gene') %>%
select(seq_type, start, end, gene, logFC, p.mod) %>%
rename(log2_fold_change = logFC,
pvalue = p.mod) %>%
mutate(
pvalue = as.numeric(pvalue),
pvalue = replace_na(pvalue, 1),
log2_fold_change = as.numeric(log2_fold_change),
log2_fold_change = replace_na(log2_fold_change, 0)
)
)
(ann <- circ_df %>%
mutate(
significance = ifelse(pvalue < 0.05 & log2_fold_change > 1.1 | pvalue < 0.05 & log2_fold_change < -1.1,
'p < 0.05 and |log2FC| > 1.1',
ifelse(pvalue < 0.05, 'p < 0.05',
'not significant'))
) %>%
filter(significance == 'p < 0.05 and |log2FC| > 1.1') %>%
cbind(value = 0, .) %>%
select(seq_type, start, end, value, gene) %>%
distinct(start,.keep_all = TRUE)
)
(assembly_report <- read_tsv('GCF_000203855.3_ASM20385v3_assembly_report.txt', comment = "#", col_names = FALSE) %>%
select(X4, X9) %>%
group_by(X4) %>%
summarize(lengths = sum(X9)))
ref <- data.frame(V1=c("chromosome","plasmid"))
ref$V2 <- assembly_report$lengths
circos.clear()
pdf("example.pdf", 5, 5)
col_text <- "grey10"
circos.par("track.height" = 0.8, gap.degree=5,
cell.padding=c(0, 0, 0, 0))
circos.initialize(factors = ref$V1,
xlim = matrix(c(rep(0, nrow(ref)), ref$V2), ncol = 2))
# genomes
circos.track(ylim = c(0, 1), panel.fun = function(x, y){
chr = CELL_META$sector.index
xlim = CELL_META$xlim
ylim = CELL_META$ylim
circos.text(mean(xlim), mean(ylim), chr, cex=0.6, col=col_text,
facing = "bending.inside", niceFacing = TRUE)
}, bg.col = "grey95", bg.border = FALSE, track.height = 0.06)
# genomes x axis
brk <- c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5) * 10^6
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
circos.axis(h = "top", major.at = brk, labels = round(brk/10^6, 1),
labels.cex = 0.4, col = col_text, labels.col = col_text,
lwd = 0.7, labels.facing = "clockwise")
}, bg.border = FALSE)
# pvalue
circos.track(factors = circ_df$seq_type, x = circ_df$start, y = circ_df$pvalue, panel.fun = function(x, y) {
circos.points(x, y, col = '#000000', cex = 0.25, pch = 16) # , lwd = 0.3) ### normal is 0.6? though possibly too wide
}, ylim = range(circ_df$pvalue), track.height = 0.05, bg.border=FALSE) ###### ylim = range(circ_df$pvalue)
# pvalue y-axis
circos.yaxis(at = c(0.00001, 0.4, 0.7, 1), labels.cex = 0.15, lwd = 0.2,
tick.length = 0.9, labels.col = 'grey70', col = 'grey70')
# Log2FC
circos.track(factors = circ_df$seq_type, x = circ_df$start, y = circ_df$log2_fold_change, panel.fun = function(x, y) {
circos.lines(x, y, type = 'o', pt.col = set1[11], cex = 0.15, lwd = 0.3, col = set1[11]) # lwd = 0.3) ### normal is 0.6? though possibly too wide
}, ylim = range(circ_df$log2_fold_change), track.height = 0.35, bg.border=FALSE) #### track height for value; normal is between 0.08 and 0.3
# Log2FC y-axis
circos.yaxis(at = c(-8, -5, -3, 0, 3, 5, 8), labels.cex = 0.15, lwd = 0.2,
tick.length = 0.9, labels.col = 'grey70', col = 'grey70')
# gene labels
circos.genomicLabels(ann,
labels.column = 5,
cex = 0.25,
col=col_text,
line_lwd = 0.5, line_col = "grey10", side="inside",
connection_height = 0.05, labels_height = 0.04)
